{"version":3,"sources":["dal/usersApi.ts","bll/usersReducer.ts","components/SuperButton.tsx","components/ModalDeleteUser.tsx","components/ModalUpdateUser.tsx","components/UsersTable.tsx","components/utils/Sort.ts","components/ModalAddUser.tsx","components/UsersTableContainer.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","usersAPI","get","initialState","defaultUser","uuid","SET_USERS","ADD_USER","DELETE_USER","UPDATE_USER","fetchUsersTC","dispatch","then","res","users","data","type","addUserTC","name","email","user","deleteUserTC","id","userId","updateUserTC","username","city","updateUserAC","SuperButton","callback","title","style","Button","onClick","variant","ModalDeleteUser","props","React","open","setOpen","useDispatch","handleClose","backgroundColor","color","Dialog","onClose","DialogTitle","DialogContent","DialogActions","ModalUpdateUser","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","useEffect","setFieldValue","handleSubmit","TextField","autoFocus","margin","label","fullWidth","getFieldProps","touched","UsersTable","styleHeader","useState","sortConfig","setSortConfig","items","useMemo","sortableItems","sort","a","b","key","direction","requestSort","useSortableData","Paper","sx","width","overflow","TableContainer","maxHeight","Table","aria-label","stickyHeader","TableHead","TableRow","TableCell","align","className","undefined","getClassNamesForHeaders","TableBody","map","row","index","border","component","scope","textOverflow","address","display","flexDirection","justifyContent","ModalAddUser","UsersTableContainer","useSelector","state","length","Dashboard","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be846b17.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb/data',\r\n});\r\n\r\nexport interface Users {\r\n    id:       number | string;\r\n    name:     string;\r\n    username: string;\r\n    email:    string;\r\n    address:  Address;\r\n    phone:    string;\r\n    website:  string;\r\n    company:  Company;\r\n}\r\n\r\nexport interface Address {\r\n    street:  string;\r\n    suite:   string;\r\n    city:    string;\r\n    zipcode: string;\r\n    geo:     Geo;\r\n}\r\n\r\nexport interface Geo {\r\n    lat: string;\r\n    lng: string;\r\n}\r\n\r\nexport interface Company {\r\n    name:        string;\r\n    catchPhrase: string;\r\n    bs:          string;\r\n}\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers() {\r\n        return instance.get<Users[]>(\"\");\r\n    },\r\n};\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {Users, usersAPI} from \"../dal/usersApi\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\nconst initialState: Array<Users> = []\r\n\r\nexport const usersReducer = (state: Array<Users> = initialState, action: ActionsType): Array<Users> => {\r\n    switch (action.type) {\r\n        case SET_USERS:\r\n            return action.users.map(user => ({...user}))\r\n        case ADD_USER:\r\n            return [{...action.user}, ...state]\r\n        case DELETE_USER:\r\n            return state.filter(user => user.id !== action.userId)\r\n        case UPDATE_USER:\r\n            return state.map(user => user.id === action.userId ?\r\n                {...user,\r\n                    name: action.name,\r\n                    username: action.username,\r\n                    address: {...user.address, city: action.city },\r\n                    email: action.email }: user)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst unique_id = uuid();\r\n\r\nconst defaultUser = {\r\n    \"id\": unique_id,\r\n    \"name\": \"Default User\",\r\n    \"username\": \"default\",\r\n    \"email\": \"test@april.biz\",\r\n    \"address\": {\r\n        \"street\": \"some street\",\r\n        \"suite\": \"Apt. 123\",\r\n        \"city\": \"Gwenborough\",\r\n        \"zipcode\": \"92998-3874\",\r\n        \"geo\": {\r\n            \"lat\": \"-37.3159\",\r\n            \"lng\": \"81.1496\"\r\n        }\r\n    },\r\n    \"phone\": \"1-770-736-8031 x56442\",\r\n    \"website\": \"hildegard.org\",\r\n    \"company\": {\r\n        \"name\": \"Romaguera-Crona\",\r\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n        \"bs\": \"harness real-time e-markets\"\r\n    }\r\n}\r\n\r\n\r\nconst SET_USERS = \"/users/SET-USERS\"\r\nconst ADD_USER = \"/users/ADD-USER\"\r\nconst DELETE_USER = \"/users/DELETE-USER\"\r\nconst UPDATE_USER = \"/users/UPDATE-USER\"\r\n\r\nexport const setUsersDataAC = (users: Array<Users>) => ({type: SET_USERS, users} as const)\r\nexport const addUserAC = (user: Users) => ({type: ADD_USER, user} as const)\r\nexport const deleteUserAC = (userId: number | string) => ({type: DELETE_USER, userId} as const)\r\nexport const updateUserAC = (userId: number | string, name: string, username: string, city: string, email: string) => ({\r\n    type: UPDATE_USER,\r\n    userId,\r\n    name,\r\n    username,\r\n    city,\r\n    email\r\n} as const)\r\n\r\n\r\n// thunks\r\nexport const fetchUsersTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        usersAPI.getUsers()\r\n            .then((res) => {\r\n                dispatch(setUsersDataAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addUserTC = (name: string, email: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(addUserAC({...defaultUser, name: name, email: email}))\r\n    }\r\n}\r\n\r\nexport const deleteUserTC = (id: number | string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(deleteUserAC(id))\r\n    }\r\n}\r\n\r\nexport const updateUserTC = (userId: number | string, name: string, username: string, city: string, email: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(updateUserAC(userId, name, username, city, email))\r\n    }\r\n}\r\n// types\r\nexport type SetUsersDataActionType = ReturnType<typeof setUsersDataAC>;\r\nexport type AddUserActionType = ReturnType<typeof addUserAC>;\r\nexport type DeleteUserActionType = ReturnType<typeof deleteUserAC>;\r\nexport type UpdateUserActionType = ReturnType<typeof updateUserAC>;\r\n\r\ntype ActionsType =\r\n    | SetUsersDataActionType\r\n    | AddUserActionType\r\n    | DeleteUserActionType\r\n    | UpdateUserActionType\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n\r\ntype SuperButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    style: React.CSSProperties\r\n\r\n}\r\n\r\nexport const SuperButton: React.FC<SuperButtonPropsType> = ({callback, title,style}) => {\r\n\r\n    return (<>\r\n            <Button style={style} onClick={callback} variant={\"contained\"}>{title}</Button>\r\n        </>\r\n\r\n    )\r\n}\r\n","import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SuperButton} from \"./SuperButton\";\r\nimport {deleteUserTC} from \"../bll/usersReducer\";\r\n\r\n\r\ntype ModalDeleteUserPropsType = {\r\n    userId: string | number\r\n    name: string\r\n}\r\n\r\nexport const ModalDeleteUser = (props: ModalDeleteUserPropsType) => {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDeleteUser = () => {\r\n        dispatch(deleteUserTC(props.userId))\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const buttonAddStyle: React.CSSProperties = {backgroundColor: \"red\", color: \"white\"}\r\n\r\n    return (\r\n        <div>\r\n            <SuperButton callback={handleClickOpen} title={\"Delete\"} style={buttonAddStyle}/>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Delete User</DialogTitle>\r\n                <DialogContent>\r\n                    Are you sure you want to delete the {props.name}?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleDeleteUser}>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SuperButton} from \"./SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {updateUserTC} from \"../bll/usersReducer\";\r\nimport {useEffect} from \"react\";\r\n\r\ntype FormikErrorType = {\r\n    name?: string\r\n    username?: string\r\n    city?: string\r\n    email?: string\r\n}\r\n\r\ntype ModalUpdateUserPropsType = {\r\n    userId: number| string\r\n    name: string\r\n    username: string\r\n    city: string\r\n    email: string\r\n}\r\n\r\nexport const ModalUpdateUser = (props:ModalUpdateUserPropsType) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const buttonAddStyle: React.CSSProperties = {backgroundColor: \"orange\", color: \"white\"}\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: props.email,\r\n            name: props.name,\r\n            username: props.username,\r\n            city: props.city},\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Please type your email!\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.name) {\r\n                errors.name = 'Name required'\r\n            }\r\n            if (!values.username) {\r\n                errors.username = 'Username required'\r\n            }\r\n            if (!values.city) {\r\n                errors.city = 'City required'\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(updateUserTC(props.userId, values.name, values.username, values.city, values.email))\r\n            formik.resetForm()\r\n            setOpen(false);\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        formik.setFieldValue('name', props.name);\r\n        formik.setFieldValue('username', props.username);\r\n        formik.setFieldValue('city', props.city);\r\n        formik.setFieldValue('email', props.email);\r\n    }, [props.email, props.username, props.city, props.name])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <SuperButton callback={handleClickOpen} title={\"Update\"} style={buttonAddStyle}/>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                <DialogTitle>Update user</DialogTitle>\r\n                <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            {...formik.getFieldProps(\"name\")}\r\n                        />\r\n                    {formik.touched.name && formik.errors.name &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.name}</div>}\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"username\"\r\n                        label=\"User name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        {...formik.getFieldProps(\"username\")}\r\n                    />\r\n                    {formik.touched.username && formik.errors.username &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.username}</div>}\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"city\"\r\n                        label=\"City\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        {...formik.getFieldProps(\"city\")}\r\n                    />\r\n                    {formik.touched.city && formik.errors.city &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.city}</div>}\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button type={\"submit\"}>Update</Button>\r\n                </DialogActions>\r\n            </form>\r\n            </Dialog>\r\n        </div>\r\n);\r\n}\r\n","import * as React from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport {Button, Paper} from \"@mui/material\";\r\nimport {Users} from \"../dal/usersApi\";\r\nimport {ModalDeleteUser} from \"./ModalDeleteUser\";\r\nimport {ModalUpdateUser} from \"./ModalUpdateUser\";\r\nimport {useSortableData} from \"./utils/Sort\";\r\n\r\ntype UsersPropsType = {\r\n    users: Array<Users>\r\n}\r\n\r\nconst UsersTable = (props: UsersPropsType) => {\r\n\r\n    const styleHeader = {\r\n        backgroundColor: \"#808080\"\r\n    }\r\n\r\n    const {items, requestSort, sortConfig} = useSortableData(props.users);\r\n    const getClassNamesForHeaders = (name: string) => {\r\n        if (!sortConfig) {\r\n            return;\r\n        }\r\n        return sortConfig.key === name ? sortConfig.direction : undefined;\r\n    };\r\n\r\n\r\n    return (\r\n        <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n            <TableContainer sx={{ maxHeight: '600px' }}>\r\n            <Table aria-label=\"simple table\" stickyHeader={true}  >\r\n                <TableHead>\r\n                    <TableRow style={{}}>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                        Id\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader} >\r\n                            Name\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button  onClick={() => requestSort(\r\n                                \"username\"\r\n                            ) } className={getClassNamesForHeaders(\"username\")}>User name</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            City\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            Email\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            Actions\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.map((row, index) => (\r\n                        <TableRow\r\n                            key={row.id}\r\n                            sx={{\r\n                                \"&:last-child td, &:last-child th\": {border: 0}, \"&:nth-of-type(odd)\": {\r\n                                    backgroundColor: \"#F8F7FD\",\r\n                                },\r\n                            }}\r\n                        >\r\n                            <TableCell component=\"th\" scope=\"row\" align=\"left\"\r\n                                       style={{\r\n                                           width: '10%',\r\n                                           textOverflow: \"ellipsis\",\r\n                                           overflow: \"hidden\"\r\n                                       }}>{row.id}</TableCell>\r\n                            <TableCell align=\"left\" style={{width:\"30%\"}}>{row.name}</TableCell>\r\n                            <TableCell align=\"left\" style={{width:\"20%\"}}>{row.username}</TableCell>\r\n                            <TableCell align=\"left\" style={{width:\"20%\"}}>{row.address.city}</TableCell>\r\n                            <TableCell align=\"left\" style={{width:\"15%\"}}>{row.email}</TableCell>\r\n                            <TableCell align=\"left\" style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"row\",\r\n                                justifyContent: \"space-between\",\r\n\r\n                            }}>\r\n                                <ModalDeleteUser userId={row.id} name={row.name}/>\r\n                                <ModalUpdateUser userId={row.id}\r\n                                                 name={row.name}\r\n                                                 email={row.email}\r\n                                                 username={row.username}\r\n                                                 city={row.address.city}/>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n\r\nexport default UsersTable\r\n","import {useMemo, useState} from \"react\";\r\nimport {Users} from \"../../dal/usersApi\";\r\n\r\nexport  type HeaderType = \"id\"|\"name\"|\"username\"|\"email\"\r\n\r\n\r\nexport const useSortableData = (users: Array<Users>) => {\r\n\r\n\r\n    const [sortConfig, setSortConfig] = useState<{key: HeaderType,direction: string } | null>(null);\r\n\r\n    const sortedItems = useMemo(() => {\r\n        let sortableItems = [...users];\r\n        if (sortConfig !== null) {\r\n            sortableItems.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return sortableItems;\r\n    }, [users, sortConfig]);\r\n\r\n    const requestSort = (key:HeaderType) => {\r\n        let direction = 'ascending';\r\n        if (\r\n            sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending'\r\n        ) {\r\n            direction = 'descending';\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    return { items: sortedItems, requestSort, sortConfig };\r\n};\r\n","import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SuperButton} from \"./SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {addUserTC} from \"../bll/usersReducer\";\r\n\r\ntype FormikErrorType = {\r\n    name?: string\r\n    email?: string\r\n}\r\n\r\n\r\nexport const ModalAddUser = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const buttonAddStyle: React.CSSProperties = {backgroundColor: \"powderblue\", color: \"white\"}\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            name: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Please type your email!\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.name) {\r\n                errors.name = 'Name required'\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(addUserTC(values.name, values.email))\r\n            formik.resetForm()\r\n            setOpen(false);\r\n        },\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <SuperButton callback={handleClickOpen} title={\"Add user\"} style={buttonAddStyle}/>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                <DialogTitle>Create new user</DialogTitle>\r\n                <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            {...formik.getFieldProps(\"name\")}\r\n                        />\r\n                    {formik.touched.name && formik.errors.name &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.name}</div>}\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button type={\"submit\"}>Add</Button>\r\n                </DialogActions>\r\n            </form>\r\n            </Dialog>\r\n        </div>\r\n);\r\n}\r\n","import * as React from \"react\";\r\nimport {Users} from \"../dal/usersApi\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\nimport UsersTable from \"./UsersTable\";\r\nimport {ModalAddUser} from \"./ModalAddUser\";\r\n\r\n\r\nconst UsersTableContainer = () => {\r\n    const users = useSelector<AppRootStateType, Array<Users>>(state=> state.users)\r\n\r\n    return (\r\n        <div className={'tableWrapper'}>\r\n            <div className={'tableHeader'}>\r\n                <h3>User list</h3>\r\n                <ModalAddUser/>\r\n            </div>\r\n            {users.length > 0 ? <UsersTable users={users}/> : <div className={\"empty-table\"}>There are no more users </div>}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default UsersTableContainer\r\n","import {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchUsersTC} from \"../bll/usersReducer\";\r\nimport UsersTableContainer from \"./UsersTableContainer\";\r\n\r\nexport const Dashboard = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n\r\n        dispatch(fetchUsersTC());\r\n    }, [dispatch])\r\n    return (<div className={'main'}>\r\n            <h2>Dashboard</h2>\r\n            <div className=\"mainBlock\">\r\n                <UsersTableContainer/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Dashboard} from \"./components/Dashboard\";\n\nfunction App() {\n    return (\n        <div className={\"App\"}><Dashboard/></div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {usersReducer} from \"./usersReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./bll/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}